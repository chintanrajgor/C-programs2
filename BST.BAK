#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct node {
  int key;
  struct node *left, *right;
};
struct node *newNode(int item) {
  struct node *temp = (struct node *)malloc(sizeof(struct node));
  temp->key = item;
  temp->left = temp->right = NULL;
  return temp;
}
void inorder(struct node *root) {
  if (root != NULL) {
     inorder(root->left);
    printf("%d -> ", root->key);
    inorder(root->right);
  }
}
void postorder(struct node *root) {
  if (root != NULL) {
    inorder(root->left);
    inorder(root->right);
    printf("%d -> ", root->key);


  }
}
void preorder(struct node *root) {
  if (root != NULL) {
    printf("%d -> ", root->key);
    inorder(root->left);
    inorder(root->right);
  }
}
struct node *insert(struct node *node, int key) {
  if (node == NULL)
    return newNode(key);
  if (key < node->key)
    node->left = insert(node->left, key);
  else
    node->right = insert(node->right, key);

  return node;
}
struct node *minValueNode(struct node *node) {
  struct node *current = node;

  while (current && current->left != NULL)
    current = current->left;

  return current;
}

struct node *deleteNode(struct node *root, int key) {
   if (root == NULL) return root;

   if (key < root->key)
    root->left = deleteNode(root->left, key);
  else if (key > root->key)
    root->right = deleteNode(root->right, key);

  else {
    if (root->left == NULL) {
      struct node *temp = root->right;
      free(root);
      return temp;
    } else if (root->right == NULL) {
      struct node *temp = root->left;
      free(root);
      return temp;
    }
    else{
    struct node *temp = minValueNode(root->right);
    root->key = temp->key;

    root->right = deleteNode(root->right, temp->key);
    }
  }
  return root;
}

int main() {
  struct node *root = NULL;
  int i,n;
  clrscr();
  while(n!=6)
  {
  printf("Enter choice\n1,Insert\n2,delete\n3,inorder display\n4,postorder display\n5,preorder display\n6,Exit\n");
  scanf("%d",&n);
  switch(n)
  {
     case 1:printf("Enter the number:");
	    scanf("%d",&i);
	    root = insert(root, i);
	    break;
     case 2:printf("Enter the number:");
	    scanf("%d",&i);
	    root = deleteNode(root, i);
	    break;
     case 3:printf("Inorder traversal: ");
	    inorder(root);
	    break;
     case 4:printf("Inorder traversal: ");
	    postorder(root);
	    break;
     case 5:printf("Inorder traversal: ");
	    preorder(root);
	    break;
	    }
   }
  getch();
  return 0;
}